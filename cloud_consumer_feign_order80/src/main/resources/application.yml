server:
  port: 80

spring:
  application:
    name: cloud_consumer_feign_order80
  cloud:
    # spring cloud consul for discovery
    consul:
      host: localhost
      port: 8500
      discovery:
        service-name: ${spring.application.name}
        prefer-ip-address: true # 优先使用服务ip进行注册

    openfeign:
      # 配置超时控制间隔时间
      client:
        config:
          default:
            connectTimeout: 20000
            readTimeout: 20000
          cloud-payment-service:
            #连接超时时间，为避免演示出错，设置为40秒
            connectTimeout: 40000
            readTimeout: 40000
      # 开启hc5
      httpclient:
        hc5:
          enabled: true

      # 配置请求体和响应体的压缩
      compression:
        request:
          enabled: false
          min-request-size: 2048 #最小触发压缩的大小
          mime-types: text/xml,application/xml,application/json #触发压缩数据类型
        response:
          enabled: false
      circuitbreaker:
        enabled: false
        # 开启分组，为不同的服务设置不同的断路器策略
        group:
          enabled: false #没开分组永远不用分组的配置。精确优先、分组次之(开了分组)、默认最后

logging:
  level:
    com:
      atguigu:
        cloud:
          apis:
            PayFeignApi: debug # feign日志以什么级别监控哪个接口


# Resilience4j CircuitBreaker 按照次数：COUNT_BASED 的例子
#  6次访问中当执行方法的失败率达到50%时CircuitBreaker将进入开启OPEN状态(保险丝跳闸断电)拒绝所有请求。
#  等待5秒后，CircuitBreaker 将自动从开启OPEN状态过渡到半开HALF_OPEN状态，允许一些请求通过以测试服务是否恢复正常。
#  如还是异常CircuitBreaker 将重新进入开启OPEN状态；如正常将进入关闭CLOSE闭合状态恢复正常处理请求。
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failure-rate-threshold: 50 # 配置失败百分比
#        sliding-window-type: COUNT_BASED # 配置滑动窗口的类型
#        sliding-window-size: 6 # 配置滑动窗口的最大请求数
#        minimum-number-of-calls: 6 # 配置最小样本数（达到样本才会计算失败调用率和慢调用率）
#        automatic-transition-from-open-to-half-open-enabled: true # 配置开启从open状态到half_open状态
#        wait-duration-in-open-state: 5s
#          # seconds: 5 # 配置进入open状态到half_open状态的等待时间
#        permitted-number-of-calls-in-half-open-state: 2 # 配置测试请求最大数-即微服务宕机之后，最多可以发几次请求进行探测
#        record-exceptions:
#          - java.lang.Exception # 配置被调用的微服务发生哪些异常会被熔断器认为是失败，这里指定的是所有的异常
#    instances:
#      cloud-payment-service: # 指定微服务名字（下的所有实例）
#        base-config: default # 指定使用哪一套模板配置



# Resilience4j CircuitBreaker 按照时间：TIME_BASED 的例子
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s #神坑的位置，timelimiter 默认限制远程1s，超于1s就超时异常，配置了降级，就走降级逻辑
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
#        slowCallDurationThreshold: 2s #慢调用时间阈值，高于这个阈值的视为慢调用并增加慢调用比例。
#        slowCallRateThreshold: 30 #慢调用百分比峰值，断路器把调用时间⼤于slowCallDurationThreshold，视为慢调用，当慢调用比例高于阈值，断路器打开，并开启服务降级
#        slidingWindowType: TIME_BASED # 滑动窗口的类型
#        slidingWindowSize: 2 #滑动窗口的大小配置，配置TIME_BASED表示2秒,失败率和慢调用率的总样本时间
#        minimumNumberOfCalls: 2 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。
#        permittedNumberOfCallsInHalfOpenState: 2 #半开状态允许的最大请求数，默认值为10。
#        waitDurationInOpenState: 5s #从OPEN到HALF_OPEN状态需要等待的时间
#        recordExceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default



####resilience4j bulkhead 的例子
#resilience4j:
#  bulkhead:
#    configs:
#      default:
#        max-concurrent-calls: 3 # 隔离允许并发线程执行的最大数量
#        max-wait-duration: 1s # 当达到并发调用数量时，新的线程的阻塞时间，我只愿意等待1秒，过时不候进舱壁兜底fallback
#    instances:
#      cloud-payment-service:
#        baseConfig: default
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 20s


#### resilience4j bulkhead -THREADPOOL的例子
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s #timelimiter默认限制远程1s，超过报错不好演示效果所以加上10秒
#  thread-pool-bulkhead:
#    configs:
#      default:
#        core-thread-pool-size: 1 # 核心线程数
#        max-thread-pool-size: 2 # 最大线程数
#        queue-capacity: 1 # queue length
#    instances:
#      cloud-payment-service:
#        baseConfig: default
# spring.cloud.openfeign.circuitbreaker.group.enabled 请设置为false 新启线程和原来主线程脱离


####resilience4j ratelimiter 限流的例子
resilience4j:
  ratelimiter:
    configs:
      default:
        limitForPeriod: 2 #在一次刷新周期内，允许执行的最大请求数
        limitRefreshPeriod: 1s # 限流器每隔limitRefreshPeriod刷新一次，将允许处理的最大请求数量重置为limitForPeriod
        timeout-duration: 1 # 线程等待权限的默认等待时间,即后续无法被接受时等待的时间
    instances:
      cloud-payment-service:
        baseConfig: default



# zipkin图形展现地址和采样率设置
management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 #采样率默认为0.1(0.1就是10次只能有一次被记录下来)，值越大收集越及时。

